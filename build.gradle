import java.time.LocalDateTime
import java.time.ZoneId
import groovy.xml.*

buildscript {
    ext {
        springCloudReleaseTrain = 'Greenwich.SR2' // relates to Spring Boot 2.1.x
//        springDataReleaseTrain = 'Lovelace-RELEASE'
        springBootVersion  = '2.1.6.RELEASE'
        springBootAdminVersion = springBootVersion.split("[.]").take(3).join(".")
        gitInfoVersion     = '2.0.0'
        lombokVersion      = "2.1"
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gitInfoVersion}"
        classpath 'com.google.guava:guava:20.0'

    }
}

ext {
    containerizationGroup = "containerization"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: 'groovy'
    apply plugin: "com.gorylenko.gradle-git-properties"

    group = 'com.github.filipmalczak'

    version = "0.2.0-SNAPSHOT"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-release-local/' }
        maven { url 'https://repo.spring.io/milestone' }
    }

    //todo normalize dependency notation "group:project[:version" against group: group, name: project[, version: version]
    //I think that single-string is better

    if (project.name != "thrive-bom") {
        project.tasks["build"].dependsOn(":thrive-bom:publishToMavenLocal")
        dependencyManagement {
            imports {
                //fixme versioning is weird; maybe base on ext?
                mavenBom "com.github.filipmalczak:thrive-bom:"+project.version
            }
        }
    }

    dependencies {
        compileOnly('org.projectlombok:lombok') //fixme
        annotationProcessor('org.projectlombok:lombok')
    }

    pluginManager.withPlugin("org.springframework.boot") {
        ext {
            dockerized = true
        }

        project.springBoot {
            buildInfo {
                //todo it would be nice to inject git and build data to manifest as well
                def tz = ZoneId.systemDefault();
                def now = LocalDateTime.now().atZone(tz)
                properties {
                    time = now.toInstant()
                    additional = [
                        timezone: tz.toString(),
                        timestamp: now.toEpochSecond()
                    ]
                }
            }
        }

        project.bootRun {
            systemProperty "spring.profiles.active", "local"
        }

        project.bootJar {
            classifier "boot"
        }

        //todo clean should remove this files, same with dockerized project list
        task generateDockerfile(
            group: containerizationGroup,
            description: "Creates a Dockerfile in project directory"
        ) {
            doFirst {
                new File(project.projectDir, "Dockerfile").text = """
FROM openjdk:8-jre-alpine

LABEL maintainer="Filip Malczak (filip.malczak@gmail.com),version=${project.version}"

EXPOSE 8080

WORKDIR /var/opt/${project.name}

COPY ./build/libs/${project.name}-${project.version}-boot.jar ./${project.name}-${project.version}-boot.jar

ENTRYPOINT ["java","-jar","/var/opt/${project.name}/${project.name}-${project.version}-boot.jar"] 
""" //todo: JAVA_OPTS
            }
        }
    }

    task writeVersion(
        group: containerizationGroup,
        description: "Writes project version to <subproject build dir>/generated/meta/version.txt"
    ) {
        doFirst {
            def metaDir = new File(project.buildDir, "generated/meta")
            metaDir.mkdirs()
            new File(metaDir, "version.txt").text = project.version
        }
    }
}

def dockerizedSubprojects() {
    subprojects
        .findAll {
            try {
                it.dockerized
            } catch (MissingPropertyException e){
                false
            }
        }
}

//fixme it will work as long as no-one will change project name; project names need to be the same as dir names and only 1-level hierarchy is allowed for now
task listDockerizedProjectsDirectories(
    group: containerizationGroup,
    description: "Writes dockerized subproject names to <root project build dir>/dockerizedProjects.txt, one per line"
) {
    doFirst {
        project.buildDir.mkdirs()
        new File(project.buildDir, "dockerizedProjects.txt").text = dockerizedSubprojects()
            .collect {
                println "Found dockerized project ${it.name}"
                it.name
            }.join "\n"
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '5.2.1'
}
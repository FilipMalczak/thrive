apply plugin: "org.springframework.boot"

ext {
    capabilities = [
        swagger: true,
        api: true
    ]
}

dependencies {
    implementation project(":thrive-common")
}

ext {
    thriveDir = new File(project.buildDir, "thrive")
    thriveResourcesDir = new File(thriveDir, "resources")
}

sourceSets {
    main {
        resources {
            srcDir thriveResourcesDir
        }
    }
}

task createThriveCapabilities {
    doLast {
        def props = new Properties()
        //used to log "no capabilites" only once
        boolean noCapabilities = false
        [
            "swagger",
            "api",
            "websocket"
        ].each { capability ->
            try {
                def value = project.ext.capabilities[capability]
                if (value) {
                    [
                        "info.tags.capability."+capability,
                        "spring.cloud.zookeeper.discovery.metadata.capability."+capability
                    ].each { propKey ->
                        props.put(propKey, value as String)
                    }
                }
            } catch (MissingPropertyException e){
                if (!noCapabilities) {
                    println "No capabilities defined for project ${project.name}"
                    noCapabilities = true
                }
            }
        }

        def target = new File(thriveResourcesDir, "META-INF/capabilities.properties")
        if (!props.isEmpty()) {
            if (!target.exists()) {
                target.parentFile.mkdirs()
                target.text = ""
            }
            props.store(
                target.newWriter(),
                "Generated by " +
                    project.name + ":"+name //the latter is current task name
            )
        }
    }
}

processResources.dependsOn createThriveCapabilities
